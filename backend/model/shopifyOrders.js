const mongoose = require('mongoose');

const MoneySchema = new mongoose.Schema({
    amount: String,
    currency_code: String,
});

const LineItemSchema = new mongoose.Schema({
    id: String,
    variant_id: String,
    title: String,
    quantity: Number,
    sku: String,
    variant_title: String,
    vendor: String,
    fulfillment_service: String,
    product_id: String,
    requires_shipping: Boolean,
    taxable: Boolean,
    gift_card: Boolean,
    name: String,
    variant_inventory_management: String,
    properties: { type: Array, default: [] },
    product_exists: Boolean,
    fulfillable_quantity: Number,
    grams: Number,
    price: String,
    total_discount: String,
    fulfillment_status: { type: String, default: null },
    price_set: {
        shop_money: MoneySchema,
        presentment_money: MoneySchema,
    },
    total_discount_set: {
        shop_money: MoneySchema,
        presentment_money: MoneySchema,
    },
    discount_allocations: { type: Array, default: [] },
    duties: { type: Array, default: [] },
});

const AddressSchema = new mongoose.Schema({
    id: String,
    customer_id: String,
    first_name: String,
    last_name: String,
    company: { type: String, default: null },
    address1: String,
    address2: { type: String, default: null },
    city: String,
    province: String,
    country: String,
    zip: String,
    phone: { type: String, default: null },
    name: { type: String, default: '' },
    province_code: { type: String, default: null },
    country_code: { type: String, default: '' },
    country_name: { type: String, default: '' },
    default: { type: Boolean, default: false },
});

const CustomerSchema = new mongoose.Schema({
    id: String,
    email: String,
    created_at: String,
    updated_at: String,
    first_name: String,
    last_name: String,
    orders_count: Number,
    state: String,
    total_spent: String,
    last_order_id: { type: String, default: null },
    note: { type: String, default: null },
    verified_email: Boolean,
    multipass_identifier: { type: String, default: null },
    tax_exempt: Boolean,
    phone: { type: String, default: null },
    tags: String,
    last_order_name: String,
    currency: { type: String, default: '' },
    marketing_opt_in_level: { type: String, default: null },
    tax_exemptions: { type: Array, default: [] },
    admin_graphql_api_id: String,
    default_address: AddressSchema,
});

const OrderSchema = new mongoose.Schema({
    _id: String,
    id: String,
    email: String,
    closed_at: { type: String, default: null },
    created_at: String,
    updated_at: String,
    number: Number,
    note: { type: String, default: null },
    token: { type: String, default: '' },
    gateway: String,
    test: Boolean,
    total_price: String,
    subtotal_price: String,
    total_weight: Number,
    total_tax: String,
    taxes_included: Boolean,
    currency: String,
    financial_status: String,
    confirmed: Boolean,
    total_discounts: String,
    buyer_accepts_marketing: Boolean,
    name: String,
    referring_site: { type: String, default: null },
    landing_site: { type: String, default: null },
    cancelled_at: { type: String, default: null },
    cancel_reason: { type: String, default: null },
    reference: { type: String, default: null },
    user_id: { type: String, default: null },
    location_id: { type: String, default: null },
    source_identifier: { type: String, default: null },
    source_url: { type: String, default: null },
    device_id: { type: String, default: null },
    phone: { type: String, default: null },
    customer_locale: String,
    app_id: Number,
    browser_ip: { type: String, default: '' },
    landing_site_ref: { type: String, default: null },
    order_number: String,
    discount_applications: { type: Array, default: [] },
    discount_codes: { type: Array, default: [] },
    note_attributes: { type: Array, default: [] },
    payment_gateway_names: [String],
    processing_method: String,
    source_name: String,
    fulfillment_status: { type: String, default: null },
    tax_lines: { type: Array, default: [] },
    tags: String,
    contact_email: { type: String, default: null },
    order_status_url: { type: String, default: '' },
    presentment_currency: String,
    total_line_items_price_set: {
        shop_money: MoneySchema,
        presentment_money: MoneySchema,
    },
    total_discounts_set: {
        shop_money: MoneySchema,
        presentment_money: MoneySchema,
    },
    total_shipping_price_set: {
        shop_money: MoneySchema,
        presentment_money: MoneySchema,
    },
    subtotal_price_set: {
        shop_money: MoneySchema,
        presentment_money: MoneySchema,
    },
    total_price_set: {
        shop_money: MoneySchema,
        presentment_money: MoneySchema,
    },
    total_tax_set: {
        shop_money: MoneySchema,
        presentment_money: MoneySchema,
    },
    line_items: [LineItemSchema],
    shipping_lines: { type: Array, default: [] },
    billing_address: { type: AddressSchema, default: null },
    shipping_address: { type: AddressSchema, default: null },
    fulfillments: { type: Array, default: [] },
    client_details: { type: String, default: null },
    refunds: { type: Array, default: [] },
    customer: CustomerSchema,
});

const ShopifyOrders = mongoose.model('Order', OrderSchema);
export default ShopifyOrders;